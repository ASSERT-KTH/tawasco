apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: wasm-get-static-meta-1-
spec:
  entrypoint: per-file
  # The fingerprint is low, lets do them all at once
  # TODO, change if we start doing the pairwise comparison here...I would say no
  parallelism: 50
  templates:
  - name: per-file
    steps:
        
    - - name: merge-results
        template: merge-results-template    
        continueOn:
          failed: true

          # Add the others here
  - name: merge-results-template
    inputs:

      parameters:
      artifacts:
      - name: data
        path: "/metas"
        archive:
          none: {}
        s3:
          bucket: wasm-mutate
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "rq1/meta"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
      - name: CROW_data
        path: /crow.json
        archive:
          none: {}
        s3:
          bucket: wasm-mutate
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "rq1/crow_original_rq1.json"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
    outputs:
      artifacts:

      - name: plot
        path: /plots
        optional: true
        archive:
          none: {}
        s3:
          bucket: wasm-mutate
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "rq1/plots"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
      - name: results
        path: /summary.json
        optional: true
        archive:
          none: {}
        s3:
          bucket: wasm-mutate
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "rq1/meta.summary.json"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey

    script:
      # We have matplotlib in anaconda as well
      image: continuumio/anaconda3
      command: [python3]
      source: |

        # Add the latex generator header here for beautiful plots
        import os
        import json
        import matplotlib.pyplot as plt

      

        # list dir first
        metas = os.listdir("/metas")
        os.makedirs("/plots", exist_ok=True)
        overall = {}
        COUNTS = []
        for m in metas:
            with open(f"/metas/{m}", "r") as metajson:
                data = json.load(metajson)
                overall[m] = len(data)
                if len(data) > 1:
                    COUNTS.append(len(data))
        
        with open("/summary.json", "w") as summary:
            json.dump(overall, summary)
          
        # Do some plots here and save them as well
        # Programs distribution
        plt.hist(COUNTS, bins = len(set(COUNTS)))
        plt.xlabel("Number of variants")
        plt.ylabel("Number of programs")
        plt.savefig("/plots/rq1.variants_count.png", dpi=500)

        original_crow = json.loads(open("/crow.json").read())
        variants_crow = original_crow["CROW"]["projects"][0]["modules"][0]["functions"]
        count_crow = [int(x["variants_count"]) for x in variants_crow]

        
        plt.clf()
        
        plt.bar(list(range(len(COUNTS))), sorted(COUNTS, reverse=True),width=0.5)


        plt.ylabel("Number of variants")
        plt.yscale("log")
        plt.xlabel("Program")
        plt.xticks([])
        plt.savefig("/plots/rq1.programs.sorted.png", dpi=500)



