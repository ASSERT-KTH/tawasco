apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: wasm-ct-mitigation-1-
spec:
  archiveLogs: true
  entrypoint: per-file
  parallelism: 30
  templates:
  - name: per-file
    steps:
    - - name: measure-ctime
        template: measure-ctime-template
        arguments:
          parameters:
            - name: file
              value: "{{ item.file }}"
            - name: stacked
              value: "{{ item.stacked }}"
            - name: seed
              value: "{{ item.seed }}"
            - name: secret
              value: "{{ item.secret }}"
        withItems:
          # Load from file
          # The seed controls somesort of cache. If the results already existed before, the step will be skipped
          - { file: "sp.wasm", stacked: "0",  seed: "14", secret: "SM" }
          - { file: "eviction.wasm", stacked: "0",  seed: "14", secret: "My password" }

          # Add the mutations here
          

  - name: measure-ctime-template
    retryStrategy:
      limit: 2
    inputs:

      parameters:
      - name: file
      - name: stacked
      - name: seed
      - name: secret
      artifacts:
      - name: data
        path: "/input.wasm"
        archive:
          none: {}
        s3:
          bucket: wasm-mutate
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "rq3/wasms/{{inputs.parameters.file}}"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
          
    outputs:
      artifacts:
      
      - name: ber
        path: /result.txt
        optional: true
        archive:
          none: {}
        s3:
          bucket: wasm-mutate
          endpoint: minio-service.minio:3434
          insecure: true
          # Avoid to mount the full metas_filtered folder in the container
          key: "/timing_bers/{{inputs.parameters.file}}_{{inputs.parameters.stacked}}_{{inputs.parameters.seed}}.ber.txt"
          accessKeySecret:
            name: argo-artifacts
            key: accesskey
          secretKeySecret:
            name: argo-artifacts
            key: secretkey
      
    script:
      image: jacarte/wm-image:839e112
      command: [bash]
      # Comment out later if it holds
      #
      resources:
        requests:
          memory: "4G"
          cpu: 2.5
      source: |

        cd /

        # install minio mc
        mkdir -p $HOME/minio-binaries
        wget -O $HOME/minio-binaries/mc https://dl.min.io/client/mc/release/linux-amd64/mc
        ls
        echo "======"
        chmod +x $HOME/minio-binaries/mc
        export PATH=$PATH:$HOME/minio-binaries/

        mc config host add exp http://minio-service.minio:3434 minio minio123

        if [[  $(mc ls "exp/wasm-mutate/timing_bers/{{inputs.parameters.file}}_{{inputs.parameters.stacked}}_{{inputs.parameters.seed}}.ber.txt" | wc -l) -gt 0 ]]
        then
            echo "Already exist. Skip"
            # Check the number of oracles ?
            exit 0
          
        fi
        # Insall wasm-tools
        # wget -O wasm-tools.gz https://github.com/bytecodealliance/wasm-tools/releases/download/wasm-tools-1.0.35/wasm-tools-1.0.35-x86_64-linux.tar.gz

        # Install 7z deps
        apt-get update && apt-get install -y p7zip-full

        # Insall wasm-tools
        wget -O wasm-tools.gz https://github.com/Jacarte/tawasco/releases/download/0.1.4/wasm-tools-all-x86_64-linux-0.1.4.gz
        wget -O stacking.gz https://github.com/Jacarte/tawasco/releases/download/0.1.8/stacking-all-x86_64-linux-0.1.8.gz

        7z x stacking.gz
        chmod +x stacking
        mv stacking /usr/local/bin/stacking

        # Extract wasm-tools
        7z x wasm-tools.gz
        chmod +x wasm-tools
        mv wasm-tools /usr/local/bin/wasm-tools

        ls -la /usr/local/bin
        wasm-tools --version

        # Download wasmtime for compiling

        wget -O wasmtime.gz https://github.com/Jacarte/tawasco/releases/download/0.1.8/wasmtime-x86_64-linux-0.1.8.gz || exit 1

        rm -rf ./wasmtime || true

        7z x wasmtime.gz || exit 1
        chmod +x wasmtime
        mv wasmtime /usr/local/bin/wasmtime
        wasmtime --version

        wget -O host_single.gz https://github.com/Jacarte/tawasco/releases/download/0.1.9/host_single-x86_64-linux-0.1.9.gz
        7z x host_single.gz
        chmod +x host_single
        mv host_single /usr/local/bin/host_single


        wget -O host.gz https://github.com/Jacarte/tawasco/releases/download/0.2.1/host-x86_64-linux-0.2.1.gz
        7z x host.gz
        chmod +x host
        mv host /usr/local/bin/host
        export PATH="/usr/local/bin:$PATH"



        # disable aslr
        sysctl kernel.randomize_va_space=0
        # Download PIN
        # wget http://software.intel.com/sites/landingpage/pintool/downloads/pin-3.15-98253-gb56e429b1-gcc-linux.tar.gz
        # tar xzf pin-3.15-98253-gb56e429b1-gcc-linux.tar.gz
        # mv pin-3.15-98253-gb56e429b1-gcc-linux /opt
        export PIN_ROOT=/opt/pin-3.15-98253-gb56e429b1-gcc-linux
        # RUN echo -e "\nexport PIN_ROOT=/opt/pin-3.15-98253-gb56e429b1-gcc-linux" >> ~/.bashrc

        TRIES=100 TRIES_INFER=1 host input.wasm
        # execute the timing attack
        # download the BER script
        wget -O cache.py https://raw.githubusercontent.com/Jacarte/tawasco/main/experiments/scripts/metrics/cache_timing/estimate_stride.py
        HOST_SINGLE="./host" python3 cache.py input.wasm 1000000 1000000 {{inputs.parameters.secret}} 2> /result.txt

        